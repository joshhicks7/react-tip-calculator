{"version":3,"sources":["TipQuestions.js","MyFunctions.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["TipQuestions","bill","people","OnChangeCost","tip","OnChangeNumberOfPeople","OnChangeTipValue","useState","usePercent","setusePercent","className","console","log","htmlFor","onChange","type","min","value","e","target","name","toString","toDollar","val","number","places","vString","Math","round","pow","i","indexOf","length","Results","App","props","setState","parseFloat","parseInt","state","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3eb10d7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './TipQuestions.css';\r\n\r\nexport default function TipQuestions({bill, people, tip, OnChangeCost, OnChangeNumberOfPeople, OnChangeTipValue})\r\n{\r\n\tconst [usePercent, setusePercent] = useState(true);\r\n\r\n        return (\r\n\t<div className = \"TipQuestions\">\r\n\t\t{/*Tip Questions Header*/}\r\n\t\t<h2>MEAL QUESTIONS</h2>\r\n\t\t{console.log(people)}\r\n\t\t<div className = \"Questions\">\r\n\t\t\t{/*Total Meal Cost*/}\r\n\t\t\t<label htmlFor=\"\">BILL</label>\r\n\t\t\t<input onChange = {OnChangeCost} type = \"number\" min = '0' value = {bill}/>\r\n\t\t\t{/*Total Number of people*/}\r\n\t\t\t<label htmlFor=\"\">PEOPLE</label>\r\n\t\t\t<input value = {people} onChange = {OnChangeNumberOfPeople} type = \"number\" min = '1'/>\r\n\t\t\t{/*Tip Percentage*/}\r\n\t\t\t<label htmlFor=\"\">TIP</label>\r\n\t\t\t<div className = \"Tip_Info\">\r\n\t\t\t\t<select onChange = {CheckPercent}>\r\n\t\t\t\t\t<option value=\"Percent\">%</option>\r\n\t\t\t\t\t<option value=\"Dollar\">$</option>\r\n\t\t\t\t</select>\r\n\t\t\t\t<input type = \"number\" min = '0'name = {usePercent.toString()} onChange = {OnChangeTipValue}/>\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n    </div>\r\n\t);\r\n\r\n    function CheckPercent(e)\r\n    {\r\n    \tsetusePercent(e.target.value == \"Percent\");\r\n    }\r\n}","export default function toDollar(val)\r\n{\r\n\tval = round(val, 2);\r\n\tlet vString = val.toString();\r\n\tlet i = vString.indexOf('.');\r\n\tconsole.log(i);\r\n\r\n\tif(i >= vString.length - 2 && i > -1)\r\n\t{\r\n\t\tvString += \"0\";\r\n\t}\r\n\telse if (i == -1)\r\n\t{\r\n\t\tvString += \".00\";\r\n\t}\r\n\treturn vString;\r\n}\r\n\r\nfunction round(number, places)\r\n{\r\n  return Math.round(number * Math.pow(10, places)) / Math.pow(10,places);\r\n}","import React, { Component } from 'react';\r\nimport './Results.css'\r\nimport toDollar from './MyFunctions'\r\n\r\nfunction Results ({bill, people, tip})\r\n{\r\n\treturn (\r\n\t\t<div className = \"Results\">\r\n\t\t\t<h2>RESULTS</h2>\r\n\t\t\t{/*Total Biil + tip*/}\r\n\t\t\t<div> TOTAL BILL</div>\r\n\t\t\t${toDollar(bill + tip)}\r\n\t\t\t{/* Cost Per Person*/}\r\n\t\t\t<div> COST OF MEAL PER PERSON</div>\r\n\t\t\t${toDollar(bill / people)}\r\n\t\t\t{/* Tip Per Person*/}\r\n\t\t\t<div> TIP PER PERSON</div>\r\n\t\t\t${toDollar(tip / people)}\r\n\t\t\t<div> TOTAL PER PERSON</div>\r\n\t\t\t${toDollar((bill + tip) / people)}\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default Results\r\n","import React, { Component } from 'react';\nimport './App.css'\nimport TipQuestions from './TipQuestions'\nimport Results from './Results'\n\nexport default class App extends React.Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = \n        {\n            bill:0.0,\n            people:1,\n            tip:0.0\n        }\n    }\n    render()\n    {\n        return (\n            <div className = \"App\">\n              <h1 className = \"Header\">\n                TIP CALCULATOR               \n              </h1>\n              <div className = \"Calc_Middle\">\n                  <TipQuestions\n                  bill = {this.state.bill}\n                  people = {this.state.people}\n                  tip = {this.state.tip}\n                  OnChangeCost = {this.OnChangeCost} \n                  OnChangeNumberOfPeople = {this.OnChangeNumberOfPeople}\n                  OnChangeTipValue = {this.OnChangeTipValue}/>\n\n                  <Results\n                  people = {this.state.people}\n                  bill = {this.state.bill}\n                  tip = {this.state.tip}\n                  />\n              </div>\n            </div>\n        );\n    }\n\n    OnChangeCost = (e) =>\n    {\n        //console.log(e.target.value);\n       this.setState({bill:parseFloat(e.target.value)}) ;\n    }\n\n    OnChangeNumberOfPeople= (e) =>\n    {\n        this.setState({people:parseInt(e.target.value)});\n        //console.log(e.target.value);\n    }\n\n    OnChangeTipValue = (e) =>\n    {\n        let tip = parseFloat(e.target.value);\n       \n       console.log(e.target)\n        if(e.target.name == \"false\")\n        {\n            this.setState({tip:tip});\n        }\n        else\n        {\n            this.setState({tip: (tip * this.state.bill) / 100}); \n        }\n        \n        console.log(this.state)\n    }\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}